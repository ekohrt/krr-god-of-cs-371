;;;; -*-  Mode: LISP; Syntax: Common-Lisp; Base: 10                          -*-
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(in-microtheory ReasoningRulesMt)
(isa ReasoningRulesMt Microtheory)
(comment ReasoningRulesMt
  "ReasoningRulesMt holds all the rules to get from user prefs to activity recommendations.")

;;; see LogicalConnective in KB

;;; HORN CLAUSES



;;; THIS STUFF WORKS: DO NOT TOUCH -------------------------------------------------
(isa activityIsOpen Predicate)
(arity activityIsOpen 1)
(arg1Isa activityIsOpen EvanstonActivity)
(comment activityIsOpen
	"Activity Is Open: true if activity is open based on current time")

;;; Returns all activities that are open, given userCurrentTime
(<== (activityIsOpen ?a)
				(userCurrentTime MyUser ?currentTime)
				(closeTime ?a ?closeTime)
				(openTime ?a ?openTime)
				(lessThanOrEqualTo ?currentTime ?closeTime)
				(greaterThanOrEqualTo ?currentTime ?openTime))




(isa correctLocation Predicate)
(arity correctLocation 1)
(arg1Isa correctLocation EvanstonActivity)
(comment correctLocation
	"Correct Location: True if activity is in correct location (On/Off Campus")

;;; Check if activity is in correct location (wantsOnCampus -> onCampus, wantsOffCampus -> offCampus)
(<== (correctLocation ?a)
				(wantsOnCampus MyUser)
				(onCampus ?a))

(<== (correctLocation ?a)
			  (wantsOffCampus MyUser)
			  (offCampus ?a))



(isa correctIndoorOutdoor Predicate)
(arity correctIndoorOutdoor 1)
(arg1Isa correctIndoorOutdoor EvanstonActivity)
(comment correctIndoorOutdoor
	"Correct Indoor/Outdoor: True if activity matches user's indoor/outdoor preference")

;;; Check if activity is in correct location (wantsOnCampus -> onCampus, wantsOffCampus -> offCampus)
(<== (correctIndoorOutdoor ?a)
				(wantsIndoors MyUser)
				(indoors ?a))

(<== (correctIndoorOutdoor ?a)
				(wantsOutdoors MyUser)
				(outdoors ?a))
;;; ---------------------------------------------------------------------------------
;; Addresses servesFood

(isa correctFoodPreference Predicate)
(arity correctFoodPreference 1)
(arg1Isa correctFoodPreference EvanstonActivity)
(comment correctFoodPreference
	"Correct Food Preference: if user specifies (wantsFood myUser) then return only activities that have (servesFood ?a), otherwise if user does not specify, then return all activities including ones that serve food")

;;; Check if activity is in correct location (wantsOnCampus -> onCampus, wantsOffCampus -> offCampus)
(<== (correctFoodPreference ?a)
				(wantsFood MyUser)
				(servesFood ?a))

(<== (correctFoodPreference ?a)
				(uninferredSentence (wantsFood MyUser))
				;; FINISH THIS HORN CLAUSE - WANT TO RETURN ALL ACTIVITIES
				)


;;; Main Query
(isa thingToDo Predicate)
(arity thingToDo 1)
(arg1Isa thingToDo EvanstonActivity)
(comment thingToDo
	"The statement (thingsToDo ?outputActivity) means that some activity is a good activity for the user based on their preferences.
	Used as a query for finding all things a user wants to do given their inputs.")

(<== (thingToDo ?a) 
				(activityIsOpen ?a)
				(correctLocation ?a)
				(correctIndoorOutdoor ?a))