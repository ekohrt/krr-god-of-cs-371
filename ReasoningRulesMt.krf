;;;; -*-  Mode: LISP; Syntax: Common-Lisp; Base: 10                          -*-
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(in-microtheory ReasoningRulesMt)
(isa ReasoningRulesMt Microtheory)
(comment ReasoningRulesMt
  "ReasoningRulesMt holds all the rules to get from user prefs to activity recommendations.")



;;; --------------------
;;; Example User
(isa MyUser User)
;;; --------------------



;;; HORN CLAUSES

(isa activityIsOpen Predicate)
(arity activityIsOpen 1)
(arg1Isa activityIsOpen EvanstonActivity)
(comment activityIsOpen
	"Activity Is Open: true if activity is open based on current time")

;;; Returns only activities that are open, given userCurrentTime
(<== (activityIsOpen ?a)
				(userCurrentTime MyUser ?currentTime)
				(closeTime ?a ?closeTime)
				(openTime ?a ?openTime)
				(lessThanOrEqualTo ?currentTime ?closeTime)
				(greaterThanOrEqualTo ?currentTime ?openTime))




(isa correctLocation Predicate)
(arity correctLocation 1)
(arg1Isa correctLocation EvanstonActivity)
(comment correctLocation
	"Correct Location: True if activity is in correct location (On/Off Campus")

;;; Check if activity is in correct location (wantsOnCampus -> onCampus, wantsOffCampus -> offCampus)
(<== (correctLocation ?a)
				(wantsOnCampus MyUser)
				(onCampus ?a))

(<== (correctLocation ?a)
			  (wantsOffCampus MyUser)
			  (offCampus ?a))

(<== (correctLocation ?a)
			  (uninferredSentence (wantsOffCampus MyUser))   ;;; if neither wantsOffCampus/wantsOnCampus is specified, return all Activities
			  (uninferredSentence (wantsOnCampus MyUser))
			  (isa ?a EvanstonActivity))	



(isa correctIndoorOutdoor Predicate)
(arity correctIndoorOutdoor 1)
(arg1Isa correctIndoorOutdoor EvanstonActivity)
(comment correctIndoorOutdoor
	"Correct Indoor/Outdoor: True if activity matches user's indoor/outdoor preference")

(<== (correctIndoorOutdoor ?a)
				(wantsIndoors MyUser)
				(indoors ?a))

(<== (correctIndoorOutdoor ?a)
				(wantsOutdoors MyUser)
				(outdoors ?a))

(<== (correctIndoorOutdoor ?a)
			  (uninferredSentence (wantsIndoors MyUser))   ;;; if neither wantsIndoors/wantsOutdoors is specified, return all Activities
			  (uninferredSentence (wantsOutdoors MyUser))
			  (isa ?a EvanstonActivity))	





(isa correctStudySpot Predicate)
(arity correctStudySpot 1)
(arg1Isa correctStudySpot EvanstonActivity)
(comment correctStudySpot
	"Correct Study Spot Preference")

(<== (correctStudySpot ?a)
				(wantsStudySpot MyUser)
				(studySpot ?a))

(<== (correctStudySpot ?a)
				(uninferredSentence (wantsStudySpot MyUser)) ;;; if wantsStudySpot is unspecified, return all Activities
				(isa ?a EvanstonActivity))





;; Addresses servesFood

(isa correctFoodPreference Predicate)
(arity correctFoodPreference 1)
(arg1Isa correctFoodPreference EvanstonActivity)
(comment correctFoodPreference
	"Correct Food Preference: if user specifies (wantsServesFood myUser) then return only activities that have (servesFood ?a), otherwise if user does not specify, then return all activities including ones that serve food")

(<== (correctFoodPreference ?a)
				(wantsServesFood MyUser)
				(servesFood ?a))

(<== (correctFoodPreference ?a)
				(uninferredSentence (wantsServesFood MyUser)) ;;; if wantsServesFood is unspecified, return all Activities
				(isa ?a EvanstonActivity))




;;;wantsServesCaffeine
(isa correctCaffeinePreference Predicate)
(arity correctCaffeinePreference 1)
(arg1Isa correctCaffeinePreference EvanstonActivity)
(comment correctCaffeinePreference
	"Correct Caffeine Preference: if user specifies (correctCaffeinePreference myUser) then 
	return only activities that have (servesCaffeine ?a), otherwise if user does not specify, 
	then return all activities including ones that serve caffeine")

(<== (correctCaffeinePreference ?a)
				(wantsServesCaffeine MyUser)
				(servesCaffeine ?a))

(<== (correctCaffeinePreference ?a)
				(uninferredSentence (wantsServesCaffeine MyUser)) ;;; if wantsServesCaffeine is unspecified, return all Activities
				(isa ?a EvanstonActivity))




;;;wantsServesAlcohol
(isa correctAlcoholPreference Predicate)
(arity correctAlcoholPreference 1)
(arg1Isa correctAlcoholPreference EvanstonActivity)
(comment correctAlcoholPreference
	"Correct Alcohol Preference")

(<== (correctAlcoholPreference ?a)
				(wantsServesAlcohol MyUser)
				(servesAlcohol ?a))

(<== (correctAlcoholPreference ?a)
				(uninferredSentence (wantsServesAlcohol MyUser)) ;;; if wantsServesAlcohol is unspecified, return all Activities
				(isa ?a EvanstonActivity))




;;;wantsShoppingPlace
(isa correctShoppingPreference Predicate)
(arity correctShoppingPreference 1)
(arg1Isa correctShoppingPreference EvanstonActivity)
(comment correctShoppingPreference
	"Correct Shopping Preference")

(<== (correctShoppingPreference ?a)
				(wantsShoppingPlace MyUser)
				(shoppingPlace ?a))

(<== (correctShoppingPreference ?a)
				(uninferredSentence (wantsShoppingPlace MyUser)) ;;; if wantsShoppingPlace is unspecified, return all Activities
				(isa ?a EvanstonActivity))




;;;wantsExercise
(isa correctExercisePreference Predicate)
(arity correctExercisePreference 1)
(arg1Isa correctExercisePreference EvanstonActivity)
(comment correctExercisePreference
	"Correct Exercise Preference")

(<== (correctExercisePreference ?a)
				(wantsExercise MyUser)
				(involvesExercise ?a))

(<== (correctExercisePreference ?a)
				(uninferredSentence (wantsExercise MyUser)) ;;; if wantsExercise is unspecified, return all Activities
				(isa ?a EvanstonActivity))


;;;-----------------------------------------------------------------
;;; Main Query
(isa thingToDo Predicate)
(arity thingToDo 1)
(arg1Isa thingToDo EvanstonActivity)
(comment thingToDo
	"The statement (thingsToDo ?outputActivity) means that some activity is a good activity for the user based on their preferences.
	Used as a query for finding all things a user wants to do given their inputs.")

(<== (thingToDo ?a) 
				(activityIsOpen ?a)
				(correctLocation ?a)
				(correctIndoorOutdoor ?a)
				(correctStudySpot ?a)
				(correctFoodPreference ?a)
				(correctCaffeinePreference ?a)
				(correctAlcoholPreference ?a)
				(correctShoppingPreference ?a)
				(correctExercisePreference ?a))
